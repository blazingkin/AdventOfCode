import FileSystem
import Lists

last_called = 0

constructor Board(entries)

    marked = range(5).map(x -> range(5).map(y -> false))
    :show
        entries
    end

    :score
        total = 0
        for row = 0; row < entries.size(); row++
            for col = 0; col < entries[row].size(); col++
                if marked[row][col] == false
                    total = total + entries[row][col]
                end
            end
        end

    end

    :check_row(row_num)
        for i = 0; i < 5; i++
            if marked[row_num][i] == false
                return 0
            end
        end
        this.wins()
    end

    :check_col(col_num)
        for i = 0; i < 5; i++
            if marked[i][col_num] == false
                return 0
            end
        end
        this.wins()
    end


    :wins
        print("This one won: score is")
        print(this.score())
        print(this.score() * last_called)
        eafdasfxit(1)
    end

    :mark(num)
        for row = 0; row < entries.size(); row++
            for col = 0; col < entries[row].size(); col++
                if entries[row][col] == num
                    marked[row][col] = true
                    this.check_row(row)
                    this.check_col(col)
                end
            end
        end
    end

end

inp = open("input").read_lines()

drawn = inp[0].split_on_token(",").map(x -> x.to_number())

boards = []
for i = 2; i < inp.size(); i = i + 6
    str_rows = [inp[i], inp[i + 1], inp[i + 2], inp[i + 3], inp[i + 4]]
    rows = []
    for y = 0; y < str_rows.size(); y++
        the_row = str_rows[y]
        rows[y] = range(5).map(x -> the_row.slice(x * 3, ((x + 1) * 3) - 1)).map(x -> x.to_number())
    end
    boards[boards.size()] = Board(rows)
end

for d = 0; d < drawn.size(); d++
    last_called = drawn[d]
    print(last_called)
    boards.each!(b -> b.mark(drawn[d]))
end